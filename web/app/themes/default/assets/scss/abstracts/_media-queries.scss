@use 'sass:map';
@use 'variables' as v;

@mixin min-device($breakpoint) {
  @if map.has-key(v.$breakpoints, $breakpoint) {
    @media screen and (min-width: map.get(v.$breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Breakpoint '#{$breakpoint}' not found in $breakpoints map. Please check the name.";
  }
}

@mixin max-device($breakpoint) {
	@if map.has-key(v.$breakpoints, $breakpoint) {
		@media screen and (max-width: (map.get(v.$breakpoints, $breakpoint) - 1)) {
			@content;
		}
	} @else {
    @warn "Breakpoint '#{$breakpoint}' not found in $breakpoints map. Please check the name.";
  }
}

@mixin only-device($breakpoint) {
	@if map.has-key(v.$breakpoints, $breakpoint) {
		$breakpoints-length: length(v.$breakpoints);
		$map-list: map.keys(v.$breakpoints);

		@if index($map-list, $breakpoint) == $breakpoints-length {
			@include min-device($breakpoint) {
				@content;
			}
		} @else {
			$next-device-index: index($map-list, $breakpoint) + 1;
			$next-device-key: nth($map-list, $next-device-index);

			@include min-device($breakpoint) {
				@include max-device($next-device-key) {
					@content;
				}
			}
		}
	} @else {
		@warn "Breakpoint '#{$breakpoint}' not found in $breakpoints map. Please check the name.";
	}
}

@mixin between-devices($min-device, $max-device) {
	@if map.has-key(v.$breakpoints, $min-device) and map.has-key(v.$breakpoints, $max-device) {
		@include min-device($min-device) {
			@include max-device($max-device) {
				@content;
			}
		}
	} @else {
		@warn "Breakpoints '#{$min-device}' and '#{$max-device}' not found in $breakpoints map. Please check the names.";
	}
}
